import ssl
import atexit
import sys
import time
from pyVmomi import vim, vmodl
from pyVim import connect, task
from pyVim.connect import Disconnect

context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
context.verify_mode = ssl.CERT_NONE
srv_inst = connect.SmartConnect(host='vcsa-01a.corp.local', user='administrator@corp.local', pwd='VMware1!', port=443, sslContext= context)
content = srv_inst.RetrieveContent()
datacenters = [entity for entity in content.rootFolder.childEntity if hasattr(entity,'vmFolder')]
for dc in datacenters:
	print(dc.name)	
allvms = [item for item in content.viewManager.CreateContainerView(content.rootFolder, [vim.VirtualMachine], recursive=True).view]
for each_vm in allvms:
	print(each_vm.name)
portgroups = [item for item in content.viewManager.CreateContainerView(content.rootFolder, [vim.dvs.DistributedVirtualPortgroup], recursive=True).view]
for each_pg in portgroups:
	print(each_pg, each_pg.name)
	print(each_pg.vm)
	foundvms = each_pg.vm
	foundportgroup=each_pg
	

foundvm = foundvms[0]
nicinfos = dict()
### Get nics of a vm
for device in foundvm.config.hardware.device:
	if isinstance(device, vim.vm.device.VirtualEthernetCard):
		dev_backing = device.backing
		if hasattr(dev_backing, 'port'):
			portgroupkey = device.backing.port.portgroupKey
			dvs = content.dvSwitchManager.QueryDvsByUuid(dvsUuuid)
			pgobj = dvs.LookupDvPortGroup(portGroupKey)
			nicinfos[device.deviceInfo.label] = list()
			nicinfos[device.deviceInfo.label].append(pgobj.config.name)
			nicinfos[device.deviceInfo.label].append(device)
			print(nicinfos)
			
##Change NIC portgroup:

change_portgroup="DVportgroup1"
for key, val in nicinfos.items:
	if val[0].lower() == change_portgroup.lower():
		device = val[1]
		break

nicspec = vim.vm.device.VirtualDeviceSpec()
nicspec.operation = vim.vm.device.VirtualDeviceSpec.Operation.edit
nicspec.device = device
macadddress = device.macAddress
nicspec.device.wakeOnLanEnabled = True
dvs_port_connection = vim.dvs.PortConnection()
dvs_port_connection.portgroupKey = foundpg.key
dvs_port_connection.SwitchUuid = foundpg.config.distributedVirtualSwitch.uuid
nicspec.device.backing = vim.vm.device.VirtualEthernetCard.DistributedVirtualPortBackingInfo()
nicspec.device.backing.port = dvs_port_connection
nicspec.device.connectable = vim.vm.device.VirtualDevice.ConnectInfo()
nicspec.device.connectable.connected = connect_stat
nicspec.device.connectable.alloGuestControl = True
device_change.append(nicspec)
config_spec = vim.vm.ConfigSpec(deviceChange=device_change)
task = foundvm.ReconfigVM_Task(config_spec)
wait_for_tasks([task])

def wait_for_tasks(tasks):
    pcfilter = None
    try:
        property_collector = content.propertyCollector
        task_list = [str(task) for task in tasks]
        obj_specs = [vmodl.query.ProperyCollector.ObjectSpec(obj=task) for task in tasks]
        property_spec = vmodl.query.ProperyCollector.PropertySpec(type=vim.Task, pathSet=[], all=True)
        filter_spec = vmodl.query.PropertyCollector.FilterSpec()
        filter_spec.objectSet = obj_specs
        filter_spec.propSet = [property_spec]
        pcfilter = property_collector.CreateFilter(filter_spec, True)
        version, state = None, None
        while len(task_list):
            update = property_collector.WaitForUpdates(version)
            for filter_set in update.filterSet:
                for obj_set in filter_set.objectSet:
                    task = obj_set.obj
                    for change in obj_set.changeSet:
                        if change.name == 'info':
                            state = change.val.state
                        elif change.name == 'info.state':
                            state = change.val
                        else:
                            continue
                        if not str(task) in task_list:
                            continue
                        if state == vim.TaskInfo.State.success:
                            task_list.remove(str(task))
                        elif state == vim.TaskInfo.State.error:
                            raise task.info.error
        verion = update.version
    finally:
        if pcfilter:
            pcfilter.Destroy()

        
						
def find_dvs_portgroup():


def get_obj(content, vimtype, name):
    obj = None
    container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True)
    for c in container.view:
        if c.name.upper() == name.upper():
            obj = c
            break
    return obj
	


def create_vdswitch(content, datacenter_name, vdswitch_name):
	vdswitch_name = vdswitch_name+'-NEW'
	datacenter = get_obj(content, [vim.Datacenter], datacenter_name)
		if datacenter:
			spec = vim.DistributedVirtualSwitch.CreateSpec()
			spec.configSpec = vim.DistributedVirtualSwitch.ConfigSpec(name=vdswitch_name)
			task = datacenter.networkFolder.CreateDistributedVirtualSwitch(spec)
			pyVim.task.WaitForTask(task)
			#vdswitch_mo = task.info.result
			print("Created Distributed Switch '{}' ({})".format(vdswitch_name, vdswitch_mo._moId))
    return vdswitch_mo._moId, vdswitch_name

def fetch_vds_config(content,vdswitch_name):
    dvs = get_obj(content, [vim.DistributedVirtualSwitch], vdswitch_name)
    dvsconfig = dvs.config
    portGroup = dvsconfi.uplinkPortgroup
